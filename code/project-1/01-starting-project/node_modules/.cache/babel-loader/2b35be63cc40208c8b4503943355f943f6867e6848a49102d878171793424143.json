{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blakleyd\\\\source\\\\repos\\\\drblakl\\\\react-complete-guide-code\\\\code\\\\project-1\\\\01-starting-project\\\\src\\\\App.js\";\nimport logo from './assets/investment-calculator-logo.png';\nimport InvestmentForm from './components/InvestmentForm';\nimport InvestmentResults from './components/InvestmentResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  let investments = [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      onAddInvestment: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentResults, {\n      items: investments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","InvestmentForm","InvestmentResults","jsxDEV","_jsxDEV","App","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","investments","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onAddInvestment","items","_c","$RefreshReg$"],"sources":["C:/Users/blakleyd/source/repos/drblakl/react-complete-guide-code/code/project-1/01-starting-project/src/App.js"],"sourcesContent":["import logo from './assets/investment-calculator-logo.png';\r\nimport InvestmentForm from './components/InvestmentForm';\r\nimport InvestmentResults from './components/InvestmentResults';\r\n\r\nfunction App() {\r\n    const calculateHandler = (userInput) => {\r\n        // Should be triggered when form is submitted\r\n        // You might not directly want to bind it to the submit event on the form though...\r\n\r\n        const yearlyData = []; // per-year results\r\n\r\n        let currentSavings = +userInput['savings']; // feel free to change the shape of this input object!\r\n        const yearlyContribution = +userInput['contribution']; // as mentioned: feel free to change the shape...\r\n        const expectedReturn = +userInput['return'] / 100;\r\n        const duration = +userInput['duration'];\r\n\r\n        // The below code calculates yearly results (total savings, interest etc)\r\n        for (let i = 0; i < duration; i++) {\r\n            const yearlyInterest = currentSavings * expectedReturn;\r\n            currentSavings += yearlyInterest + yearlyContribution;\r\n            yearlyData.push({\r\n                // feel free to change the shape of the data pushed to the array!\r\n                year: i + 1,\r\n                yearlyInterest: yearlyInterest,\r\n                savingsEndOfYear: currentSavings,\r\n                yearlyContribution: yearlyContribution,\r\n            });\r\n        }\r\n\r\n        // do something with yearlyData ...\r\n    };\r\n\r\n    let investments = [];\r\n\r\n    return (\r\n        <div>\r\n            <header className=\"header\">\r\n                <img src={logo} alt=\"logo\" />\r\n                <h1>Investment Calculator</h1>\r\n            </header>\r\n\r\n            <InvestmentForm onAddInvestment={calculateHandler}></InvestmentForm>\r\n\r\n            {/* Todo: Show below table conditionally (only once result data is available) */}\r\n            {/* Show fallback text if no data is available */}\r\n\r\n            <InvestmentResults items={investments}></InvestmentResults>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,iBAAiB,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,GAAGA,CAAA,EAAG;EACX,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACpC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5C,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IACvD,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,QAAQ,CAAC,GAAG,GAAG;IACjD,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACZ;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACxB,CAAC,CAAC;IACN;;IAEA;EACJ,CAAC;;EAED,IAAIQ,WAAW,GAAG,EAAE;EAEpB,oBACId,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAQgB,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACtBf,OAAA;QAAKiB,GAAG,EAAErB,IAAK;QAACsB,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7BtB,OAAA;QAAAe,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAETtB,OAAA,CAACH,cAAc;MAAC0B,eAAe,EAAErB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAAC,eAKpEtB,OAAA,CAACF,iBAAiB;MAAC0B,KAAK,EAAEV;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAoB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEd;AAACG,EAAA,GA7CQxB,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}