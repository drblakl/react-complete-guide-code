/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/*globals __resourceQuery */
if (module.hot) {
	var log = require("./log");
<<<<<<< HEAD

	/**
	 * @param {boolean=} fromUpdate true when called from update
	 */
	var checkForUpdate = function checkForUpdate(fromUpdate) {
		module.hot
			.check()
			.then(function (updatedModules) {
=======
	var checkForUpdate = function checkForUpdate(fromUpdate) {
		module.hot
			.check()
			.then(function(updatedModules) {
>>>>>>> fb9087a8f6cdc7859ecd725957ccb7c04a787284
				if (!updatedModules) {
					if (fromUpdate) log("info", "[HMR] Update applied.");
					else log("warning", "[HMR] Cannot find update.");
					return;
				}

				return module.hot
					.apply({
						ignoreUnaccepted: true,
<<<<<<< HEAD
						onUnaccepted: function (data) {
=======
						onUnaccepted: function(data) {
>>>>>>> fb9087a8f6cdc7859ecd725957ccb7c04a787284
							log(
								"warning",
								"Ignored an update to unaccepted module " +
									data.chain.join(" -> ")
							);
						}
					})
<<<<<<< HEAD
					.then(function (renewedModules) {
=======
					.then(function(renewedModules) {
>>>>>>> fb9087a8f6cdc7859ecd725957ccb7c04a787284
						require("./log-apply-result")(updatedModules, renewedModules);

						checkForUpdate(true);
						return null;
					});
			})
<<<<<<< HEAD
			.catch(function (err) {
				var status = module.hot.status();
				if (["abort", "fail"].indexOf(status) >= 0) {
					log("warning", "[HMR] Cannot apply update.");
					log("warning", "[HMR] " + log.formatError(err));
=======
			.catch(function(err) {
				var status = module.hot.status();
				if (["abort", "fail"].indexOf(status) >= 0) {
					log("warning", "[HMR] Cannot apply update.");
					log("warning", "[HMR] " + (err.stack || err.message));
>>>>>>> fb9087a8f6cdc7859ecd725957ccb7c04a787284
					log("warning", "[HMR] You need to restart the application!");
				} else {
					log("warning", "[HMR] Update failed: " + (err.stack || err.message));
				}
			});
	};

<<<<<<< HEAD
	process.on(__resourceQuery.slice(1) || "SIGUSR2", function () {
=======
	process.on(__resourceQuery.substr(1) || "SIGUSR2", function() {
>>>>>>> fb9087a8f6cdc7859ecd725957ccb7c04a787284
		if (module.hot.status() !== "idle") {
			log(
				"warning",
				"[HMR] Got signal but currently in " + module.hot.status() + " state."
			);
			log("warning", "[HMR] Need to be in idle state to start hot update.");
			return;
		}

		checkForUpdate();
	});
} else {
	throw new Error("[HMR] Hot Module Replacement is disabled.");
}
